{
  "modelTopology": {
    "node": [
      {
        "name": "decode/decoder/multi_rnn_cell/cell_0/gru_cell/gates/kernel",
        "op": "Const",
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_FLOAT",
              "tensorShape": {
                "dim": [
                  {
                    "size": "258"
                  },
                  {
                    "size": "514"
                  }
                ]
              }
            }
          },
          "dtype": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode/decoder/multi_rnn_cell/cell_0/gru_cell/gates/bias",
        "op": "Const",
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_FLOAT",
              "tensorShape": {
                "dim": [
                  {
                    "size": "514"
                  }
                ]
              }
            }
          },
          "dtype": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "rnn/MultiRNNCellZeroState/GRUCellZeroState_1/Const",
        "op": "Const",
        "attr": {
          "dtype": {
            "type": "DT_INT32"
          },
          "value": {
            "tensor": {
              "dtype": "DT_INT32",
              "tensorShape": {
                "dim": [
                  {
                    "size": "1"
                  }
                ]
              }
            }
          }
        }
      },
      {
        "name": "rnn/multi_rnn_cell/cell_1/gru_cell/gates/kernel",
        "op": "Const",
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_FLOAT",
              "tensorShape": {
                "dim": [
                  {
                    "size": "771"
                  },
                  {
                    "size": "514"
                  }
                ]
              }
            }
          },
          "dtype": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "rnn/multi_rnn_cell/cell_1/gru_cell/gates/bias",
        "op": "Const",
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_FLOAT",
              "tensorShape": {
                "dim": [
                  {
                    "size": "514"
                  }
                ]
              }
            }
          },
          "dtype": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "rnn/multi_rnn_cell/cell_1/gru_cell/candidate/kernel",
        "op": "Const",
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_FLOAT",
              "tensorShape": {
                "dim": [
                  {
                    "size": "771"
                  },
                  {
                    "size": "257"
                  }
                ]
              }
            }
          },
          "dtype": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "rnn/multi_rnn_cell/cell_1/gru_cell/candidate/bias",
        "op": "Const",
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_FLOAT",
              "tensorShape": {
                "dim": [
                  {
                    "size": "257"
                  }
                ]
              }
            }
          },
          "dtype": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode/decoder/multi_rnn_cell/cell_0/gru_cell/candidate/kernel",
        "op": "Const",
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_FLOAT",
              "tensorShape": {
                "dim": [
                  {
                    "size": "258"
                  },
                  {
                    "size": "257"
                  }
                ]
              }
            }
          },
          "dtype": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode/decoder/multi_rnn_cell/cell_0/gru_cell/candidate/bias",
        "op": "Const",
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_FLOAT",
              "tensorShape": {
                "dim": [
                  {
                    "size": "257"
                  }
                ]
              }
            }
          },
          "dtype": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode/decoder/multi_rnn_cell/cell_1/gru_cell/gates/kernel",
        "op": "Const",
        "attr": {
          "dtype": {
            "type": "DT_FLOAT"
          },
          "value": {
            "tensor": {
              "dtype": "DT_FLOAT",
              "tensorShape": {
                "dim": [
                  {
                    "size": "771"
                  },
                  {
                    "size": "1028"
                  }
                ]
              }
            }
          }
        }
      },
      {
        "name": "decode/decoder/multi_rnn_cell/cell_1/gru_cell/gates/bias",
        "op": "Const",
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_FLOAT",
              "tensorShape": {
                "dim": [
                  {
                    "size": "1028"
                  }
                ]
              }
            }
          },
          "dtype": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "rnn/MultiRNNCellZeroState/GRUCellZeroState/Const",
        "op": "Const",
        "attr": {
          "dtype": {
            "type": "DT_INT32"
          },
          "value": {
            "tensor": {
              "dtype": "DT_INT32",
              "tensorShape": {
                "dim": [
                  {
                    "size": "1"
                  }
                ]
              }
            }
          }
        }
      },
      {
        "name": "decode_1/decoder/zeros/Const",
        "op": "Const",
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_FLOAT",
              "tensorShape": {}
            }
          },
          "dtype": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "rnn/multi_rnn_cell/cell_0/gru_cell/gates/kernel",
        "op": "Const",
        "attr": {
          "dtype": {
            "type": "DT_FLOAT"
          },
          "value": {
            "tensor": {
              "dtype": "DT_FLOAT",
              "tensorShape": {
                "dim": [
                  {
                    "size": "771"
                  },
                  {
                    "size": "1028"
                  }
                ]
              }
            }
          }
        }
      },
      {
        "name": "rnn/multi_rnn_cell/cell_0/gru_cell/gates/bias",
        "op": "Const",
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_FLOAT",
              "tensorShape": {
                "dim": [
                  {
                    "size": "1028"
                  }
                ]
              }
            }
          },
          "dtype": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "rnn/multi_rnn_cell/cell_0/gru_cell/candidate/kernel",
        "op": "Const",
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_FLOAT",
              "tensorShape": {
                "dim": [
                  {
                    "size": "771"
                  },
                  {
                    "size": "514"
                  }
                ]
              }
            }
          },
          "dtype": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "rnn/multi_rnn_cell/cell_0/gru_cell/candidate/bias",
        "op": "Const",
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_FLOAT",
              "tensorShape": {
                "dim": [
                  {
                    "size": "514"
                  }
                ]
              }
            }
          },
          "dtype": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode_1/decoder/TensorArrayStack/range/delta",
        "op": "Const",
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_INT32",
              "tensorShape": {}
            }
          },
          "dtype": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "Placeholder",
        "op": "Placeholder",
        "attr": {
          "dtype": {
            "type": "DT_FLOAT"
          },
          "shape": {
            "shape": {
              "dim": [
                {
                  "size": "-1"
                },
                {
                  "size": "-1"
                },
                {
                  "size": "257"
                }
              ]
            }
          }
        }
      },
      {
        "name": "rnn/strided_slice/stack_1",
        "op": "Const",
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_INT32",
              "tensorShape": {
                "dim": [
                  {
                    "size": "1"
                  }
                ]
              }
            }
          },
          "dtype": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "decode/decoder/multi_rnn_cell/cell_1/gru_cell/candidate/kernel",
        "op": "Const",
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_FLOAT",
              "tensorShape": {
                "dim": [
                  {
                    "size": "771"
                  },
                  {
                    "size": "514"
                  }
                ]
              }
            }
          },
          "dtype": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode/decoder/multi_rnn_cell/cell_1/gru_cell/candidate/bias",
        "op": "Const",
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_FLOAT",
              "tensorShape": {
                "dim": [
                  {
                    "size": "514"
                  }
                ]
              }
            }
          },
          "dtype": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode/decoder/dense/kernel",
        "op": "Const",
        "attr": {
          "dtype": {
            "type": "DT_FLOAT"
          },
          "value": {
            "tensor": {
              "dtype": "DT_FLOAT",
              "tensorShape": {
                "dim": [
                  {
                    "size": "514"
                  },
                  {
                    "size": "1"
                  }
                ]
              }
            }
          }
        }
      },
      {
        "name": "decode/decoder/dense/bias",
        "op": "Const",
        "attr": {
          "dtype": {
            "type": "DT_FLOAT"
          },
          "value": {
            "tensor": {
              "dtype": "DT_FLOAT",
              "tensorShape": {
                "dim": [
                  {
                    "size": "1"
                  }
                ]
              }
            }
          }
        }
      },
      {
        "name": "decode_1/decoder/Tile/input",
        "op": "Const",
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_BOOL",
              "tensorShape": {
                "dim": [
                  {
                    "size": "1"
                  }
                ]
              }
            }
          },
          "dtype": {
            "type": "DT_BOOL"
          }
        }
      },
      {
        "name": "Placeholder_2",
        "op": "Placeholder",
        "attr": {
          "dtype": {
            "type": "DT_FLOAT"
          },
          "shape": {
            "shape": {
              "dim": [
                {
                  "size": "-1"
                },
                {
                  "size": "1"
                }
              ]
            }
          }
        }
      },
      {
        "name": "decode_1/decoder/Const",
        "op": "Const",
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_INT32",
              "tensorShape": {
                "dim": [
                  {
                    "size": "1"
                  }
                ]
              }
            }
          },
          "dtype": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "rnn/TensorArrayUnstack/strided_slice/stack",
        "op": "Const",
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_INT32",
              "tensorShape": {
                "dim": [
                  {
                    "size": "1"
                  }
                ]
              }
            }
          },
          "dtype": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "decode_1/decoder/TensorArrayStack/range/start",
        "op": "Const",
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_INT32",
              "tensorShape": {}
            }
          },
          "dtype": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "rnn/concat",
        "op": "Const",
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_INT32",
              "tensorShape": {
                "dim": [
                  {
                    "size": "3"
                  }
                ]
              }
            }
          },
          "dtype": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "source_sequence_length",
        "op": "Placeholder",
        "attr": {
          "dtype": {
            "type": "DT_INT32"
          },
          "shape": {
            "shape": {
              "dim": [
                {
                  "size": "-1"
                }
              ]
            }
          }
        }
      },
      {
        "name": "target_sequence_length",
        "op": "Placeholder",
        "attr": {
          "shape": {
            "shape": {
              "dim": [
                {
                  "size": "-1"
                }
              ]
            }
          },
          "dtype": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/gru_cell/MatMul_2/Enter",
        "op": "Enter",
        "input": [
          "decode/decoder/multi_rnn_cell/cell_0/gru_cell/gates/kernel"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          },
          "is_constant": {
            "b": true
          },
          "parallel_iterations": {
            "i": "32"
          },
          "frame_name": {
            "s": "ZGVjb2RlXzEvZGVjb2Rlci93aGlsZS93aGlsZV9jb250ZXh0"
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/gru_cell/BiasAdd_2/Enter",
        "op": "Enter",
        "input": [
          "decode/decoder/multi_rnn_cell/cell_0/gru_cell/gates/bias"
        ],
        "attr": {
          "parallel_iterations": {
            "i": "32"
          },
          "frame_name": {
            "s": "ZGVjb2RlXzEvZGVjb2Rlci93aGlsZS93aGlsZV9jb250ZXh0"
          },
          "T": {
            "type": "DT_FLOAT"
          },
          "is_constant": {
            "b": true
          }
        }
      },
      {
        "name": "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/MatMul/Enter",
        "op": "Enter",
        "input": [
          "rnn/multi_rnn_cell/cell_1/gru_cell/gates/kernel"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          },
          "is_constant": {
            "b": true
          },
          "parallel_iterations": {
            "i": "32"
          },
          "frame_name": {
            "s": "cm5uL3doaWxlL3doaWxlX2NvbnRleHQ="
          }
        }
      },
      {
        "name": "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/BiasAdd/Enter",
        "op": "Enter",
        "input": [
          "rnn/multi_rnn_cell/cell_1/gru_cell/gates/bias"
        ],
        "attr": {
          "parallel_iterations": {
            "i": "32"
          },
          "frame_name": {
            "s": "cm5uL3doaWxlL3doaWxlX2NvbnRleHQ="
          },
          "T": {
            "type": "DT_FLOAT"
          },
          "is_constant": {
            "b": true
          }
        }
      },
      {
        "name": "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/MatMul_1/Enter",
        "op": "Enter",
        "input": [
          "rnn/multi_rnn_cell/cell_1/gru_cell/candidate/kernel"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          },
          "is_constant": {
            "b": true
          },
          "parallel_iterations": {
            "i": "32"
          },
          "frame_name": {
            "s": "cm5uL3doaWxlL3doaWxlX2NvbnRleHQ="
          }
        }
      },
      {
        "name": "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/BiasAdd_1/Enter",
        "op": "Enter",
        "input": [
          "rnn/multi_rnn_cell/cell_1/gru_cell/candidate/bias"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          },
          "is_constant": {
            "b": true
          },
          "parallel_iterations": {
            "i": "32"
          },
          "frame_name": {
            "s": "cm5uL3doaWxlL3doaWxlX2NvbnRleHQ="
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/gru_cell/MatMul_3/Enter",
        "op": "Enter",
        "input": [
          "decode/decoder/multi_rnn_cell/cell_0/gru_cell/candidate/kernel"
        ],
        "attr": {
          "parallel_iterations": {
            "i": "32"
          },
          "frame_name": {
            "s": "ZGVjb2RlXzEvZGVjb2Rlci93aGlsZS93aGlsZV9jb250ZXh0"
          },
          "T": {
            "type": "DT_FLOAT"
          },
          "is_constant": {
            "b": true
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/gru_cell/BiasAdd_3/Enter",
        "op": "Enter",
        "input": [
          "decode/decoder/multi_rnn_cell/cell_0/gru_cell/candidate/bias"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          },
          "is_constant": {
            "b": true
          },
          "parallel_iterations": {
            "i": "32"
          },
          "frame_name": {
            "s": "ZGVjb2RlXzEvZGVjb2Rlci93aGlsZS93aGlsZV9jb250ZXh0"
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/MatMul_2/Enter",
        "op": "Enter",
        "input": [
          "decode/decoder/multi_rnn_cell/cell_1/gru_cell/gates/kernel"
        ],
        "attr": {
          "parallel_iterations": {
            "i": "32"
          },
          "frame_name": {
            "s": "ZGVjb2RlXzEvZGVjb2Rlci93aGlsZS93aGlsZV9jb250ZXh0"
          },
          "T": {
            "type": "DT_FLOAT"
          },
          "is_constant": {
            "b": true
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/BiasAdd_2/Enter",
        "op": "Enter",
        "input": [
          "decode/decoder/multi_rnn_cell/cell_1/gru_cell/gates/bias"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          },
          "is_constant": {
            "b": true
          },
          "parallel_iterations": {
            "i": "32"
          },
          "frame_name": {
            "s": "ZGVjb2RlXzEvZGVjb2Rlci93aGlsZS93aGlsZV9jb250ZXh0"
          }
        }
      },
      {
        "name": "rnn/while/rnn/multi_rnn_cell/cell_0/gru_cell/MatMul/Enter",
        "op": "Enter",
        "input": [
          "rnn/multi_rnn_cell/cell_0/gru_cell/gates/kernel"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          },
          "is_constant": {
            "b": true
          },
          "parallel_iterations": {
            "i": "32"
          },
          "frame_name": {
            "s": "cm5uL3doaWxlL3doaWxlX2NvbnRleHQ="
          }
        }
      },
      {
        "name": "rnn/while/rnn/multi_rnn_cell/cell_0/gru_cell/BiasAdd/Enter",
        "op": "Enter",
        "input": [
          "rnn/multi_rnn_cell/cell_0/gru_cell/gates/bias"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          },
          "is_constant": {
            "b": true
          },
          "parallel_iterations": {
            "i": "32"
          },
          "frame_name": {
            "s": "cm5uL3doaWxlL3doaWxlX2NvbnRleHQ="
          }
        }
      },
      {
        "name": "rnn/while/rnn/multi_rnn_cell/cell_0/gru_cell/MatMul_1/Enter",
        "op": "Enter",
        "input": [
          "rnn/multi_rnn_cell/cell_0/gru_cell/candidate/kernel"
        ],
        "attr": {
          "parallel_iterations": {
            "i": "32"
          },
          "frame_name": {
            "s": "cm5uL3doaWxlL3doaWxlX2NvbnRleHQ="
          },
          "T": {
            "type": "DT_FLOAT"
          },
          "is_constant": {
            "b": true
          }
        }
      },
      {
        "name": "rnn/while/rnn/multi_rnn_cell/cell_0/gru_cell/BiasAdd_1/Enter",
        "op": "Enter",
        "input": [
          "rnn/multi_rnn_cell/cell_0/gru_cell/candidate/bias"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          },
          "is_constant": {
            "b": true
          },
          "parallel_iterations": {
            "i": "32"
          },
          "frame_name": {
            "s": "cm5uL3doaWxlL3doaWxlX2NvbnRleHQ="
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/MatMul_3/Enter",
        "op": "Enter",
        "input": [
          "decode/decoder/multi_rnn_cell/cell_1/gru_cell/candidate/kernel"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          },
          "is_constant": {
            "b": true
          },
          "parallel_iterations": {
            "i": "32"
          },
          "frame_name": {
            "s": "ZGVjb2RlXzEvZGVjb2Rlci93aGlsZS93aGlsZV9jb250ZXh0"
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/BiasAdd_3/Enter",
        "op": "Enter",
        "input": [
          "decode/decoder/multi_rnn_cell/cell_1/gru_cell/candidate/bias"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          },
          "is_constant": {
            "b": true
          },
          "parallel_iterations": {
            "i": "32"
          },
          "frame_name": {
            "s": "ZGVjb2RlXzEvZGVjb2Rlci93aGlsZS93aGlsZV9jb250ZXh0"
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/dense/MatMul_1/Enter",
        "op": "Enter",
        "input": [
          "decode/decoder/dense/kernel"
        ],
        "attr": {
          "parallel_iterations": {
            "i": "32"
          },
          "frame_name": {
            "s": "ZGVjb2RlXzEvZGVjb2Rlci93aGlsZS93aGlsZV9jb250ZXh0"
          },
          "T": {
            "type": "DT_FLOAT"
          },
          "is_constant": {
            "b": true
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/dense/BiasAdd_1/Enter",
        "op": "Enter",
        "input": [
          "decode/decoder/dense/bias"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          },
          "is_constant": {
            "b": true
          },
          "parallel_iterations": {
            "i": "32"
          },
          "frame_name": {
            "s": "ZGVjb2RlXzEvZGVjb2Rlci93aGlsZS93aGlsZV9jb250ZXh0"
          }
        }
      },
      {
        "name": "decode_1/decoder/while/Enter_6",
        "op": "Enter",
        "input": [
          "Placeholder_2"
        ],
        "attr": {
          "parallel_iterations": {
            "i": "32"
          },
          "frame_name": {
            "s": "ZGVjb2RlXzEvZGVjb2Rlci93aGlsZS93aGlsZV9jb250ZXh0"
          },
          "T": {
            "type": "DT_FLOAT"
          },
          "is_constant": {
            "b": false
          }
        }
      },
      {
        "name": "decode_1/Shape",
        "op": "Shape",
        "input": [
          "Placeholder_2"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          },
          "out_type": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "decode_1/decoder/TensorArray",
        "op": "TensorArrayV3",
        "input": [
          "decode_1/decoder/TensorArrayStack/range/start"
        ],
        "attr": {
          "element_shape": {
            "shape": {
              "dim": [
                {
                  "size": "-1"
                },
                {
                  "size": "1"
                }
              ]
            }
          },
          "clear_after_read": {
            "b": true
          },
          "dynamic_size": {
            "b": true
          },
          "identical_element_shapes": {
            "b": true
          },
          "tensor_array_name": {
            "s": ""
          },
          "dtype": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode_1/decoder/while/Enter_1",
        "op": "Enter",
        "input": [
          "decode_1/decoder/TensorArrayStack/range/start"
        ],
        "attr": {
          "T": {
            "type": "DT_INT32"
          },
          "is_constant": {
            "b": false
          },
          "parallel_iterations": {
            "i": "32"
          },
          "frame_name": {
            "s": "ZGVjb2RlXzEvZGVjb2Rlci93aGlsZS93aGlsZV9jb250ZXh0"
          }
        }
      },
      {
        "name": "rnn/while/Enter_1",
        "op": "Enter",
        "input": [
          "decode_1/decoder/TensorArrayStack/range/start"
        ],
        "attr": {
          "parallel_iterations": {
            "i": "32"
          },
          "frame_name": {
            "s": "cm5uL3doaWxlL3doaWxlX2NvbnRleHQ="
          },
          "T": {
            "type": "DT_INT32"
          },
          "is_constant": {
            "b": false
          }
        }
      },
      {
        "name": "rnn/while/Enter",
        "op": "Enter",
        "input": [
          "decode_1/decoder/TensorArrayStack/range/start"
        ],
        "attr": {
          "T": {
            "type": "DT_INT32"
          },
          "is_constant": {
            "b": false
          },
          "parallel_iterations": {
            "i": "32"
          },
          "frame_name": {
            "s": "cm5uL3doaWxlL3doaWxlX2NvbnRleHQ="
          }
        }
      },
      {
        "name": "decode_1/decoder/while/Enter",
        "op": "Enter",
        "input": [
          "decode_1/decoder/TensorArrayStack/range/start"
        ],
        "attr": {
          "parallel_iterations": {
            "i": "32"
          },
          "frame_name": {
            "s": "ZGVjb2RlXzEvZGVjb2Rlci93aGlsZS93aGlsZV9jb250ZXh0"
          },
          "T": {
            "type": "DT_INT32"
          },
          "is_constant": {
            "b": false
          }
        }
      },
      {
        "name": "rnn/transpose",
        "op": "Transpose",
        "input": [
          "Placeholder",
          "rnn/concat"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          },
          "Tperm": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "add",
        "op": "Add",
        "input": [
          "source_sequence_length",
          "decode_1/decoder/TensorArrayStack/range/start"
        ],
        "attr": {
          "T": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "max_target_len",
        "op": "Max",
        "input": [
          "target_sequence_length",
          "rnn/TensorArrayUnstack/strided_slice/stack"
        ],
        "attr": {
          "keep_dims": {
            "b": false
          },
          "Tidx": {
            "type": "DT_INT32"
          },
          "T": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "ConstantFolding/decode/decoder/multi_rnn_cell/cell_0/gru_cell/gates/kernel_enter",
        "op": "Const",
        "input": [
          "^decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/gru_cell/MatMul_2/Enter"
        ],
        "attr": {
          "dtype": {
            "type": "DT_FLOAT"
          },
          "value": {
            "tensor": {
              "dtype": "DT_FLOAT",
              "tensorShape": {
                "dim": [
                  {
                    "size": "258"
                  },
                  {
                    "size": "514"
                  }
                ]
              }
            }
          }
        }
      },
      {
        "name": "ConstantFolding/decode/decoder/multi_rnn_cell/cell_0/gru_cell/gates/bias_enter",
        "op": "Const",
        "input": [
          "^decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/gru_cell/BiasAdd_2/Enter"
        ],
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_FLOAT",
              "tensorShape": {
                "dim": [
                  {
                    "size": "514"
                  }
                ]
              }
            }
          },
          "dtype": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "ConstantFolding/rnn/multi_rnn_cell/cell_1/gru_cell/gates/kernel_enter",
        "op": "Const",
        "input": [
          "^rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/MatMul/Enter"
        ],
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_FLOAT",
              "tensorShape": {
                "dim": [
                  {
                    "size": "771"
                  },
                  {
                    "size": "514"
                  }
                ]
              }
            }
          },
          "dtype": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "ConstantFolding/rnn/multi_rnn_cell/cell_1/gru_cell/gates/bias_enter",
        "op": "Const",
        "input": [
          "^rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/BiasAdd/Enter"
        ],
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_FLOAT",
              "tensorShape": {
                "dim": [
                  {
                    "size": "514"
                  }
                ]
              }
            }
          },
          "dtype": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "ConstantFolding/rnn/multi_rnn_cell/cell_1/gru_cell/candidate/kernel_enter",
        "op": "Const",
        "input": [
          "^rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/MatMul_1/Enter"
        ],
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_FLOAT",
              "tensorShape": {
                "dim": [
                  {
                    "size": "771"
                  },
                  {
                    "size": "257"
                  }
                ]
              }
            }
          },
          "dtype": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "ConstantFolding/rnn/multi_rnn_cell/cell_1/gru_cell/candidate/bias_enter",
        "op": "Const",
        "input": [
          "^rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/BiasAdd_1/Enter"
        ],
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_FLOAT",
              "tensorShape": {
                "dim": [
                  {
                    "size": "257"
                  }
                ]
              }
            }
          },
          "dtype": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "ConstantFolding/decode/decoder/multi_rnn_cell/cell_0/gru_cell/candidate/kernel_enter",
        "op": "Const",
        "input": [
          "^decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/gru_cell/MatMul_3/Enter"
        ],
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_FLOAT",
              "tensorShape": {
                "dim": [
                  {
                    "size": "258"
                  },
                  {
                    "size": "257"
                  }
                ]
              }
            }
          },
          "dtype": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "ConstantFolding/decode/decoder/multi_rnn_cell/cell_0/gru_cell/candidate/bias_enter",
        "op": "Const",
        "input": [
          "^decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/gru_cell/BiasAdd_3/Enter"
        ],
        "attr": {
          "dtype": {
            "type": "DT_FLOAT"
          },
          "value": {
            "tensor": {
              "dtype": "DT_FLOAT",
              "tensorShape": {
                "dim": [
                  {
                    "size": "257"
                  }
                ]
              }
            }
          }
        }
      },
      {
        "name": "ConstantFolding/decode/decoder/multi_rnn_cell/cell_1/gru_cell/gates/kernel_enter",
        "op": "Const",
        "input": [
          "^decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/MatMul_2/Enter"
        ],
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_FLOAT",
              "tensorShape": {
                "dim": [
                  {
                    "size": "771"
                  },
                  {
                    "size": "1028"
                  }
                ]
              }
            }
          },
          "dtype": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "ConstantFolding/decode/decoder/multi_rnn_cell/cell_1/gru_cell/gates/bias_enter",
        "op": "Const",
        "input": [
          "^decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/BiasAdd_2/Enter"
        ],
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_FLOAT",
              "tensorShape": {
                "dim": [
                  {
                    "size": "1028"
                  }
                ]
              }
            }
          },
          "dtype": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "ConstantFolding/rnn/multi_rnn_cell/cell_0/gru_cell/gates/kernel_enter",
        "op": "Const",
        "input": [
          "^rnn/while/rnn/multi_rnn_cell/cell_0/gru_cell/MatMul/Enter"
        ],
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_FLOAT",
              "tensorShape": {
                "dim": [
                  {
                    "size": "771"
                  },
                  {
                    "size": "1028"
                  }
                ]
              }
            }
          },
          "dtype": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "ConstantFolding/rnn/multi_rnn_cell/cell_0/gru_cell/gates/bias_enter",
        "op": "Const",
        "input": [
          "^rnn/while/rnn/multi_rnn_cell/cell_0/gru_cell/BiasAdd/Enter"
        ],
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_FLOAT",
              "tensorShape": {
                "dim": [
                  {
                    "size": "1028"
                  }
                ]
              }
            }
          },
          "dtype": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "ConstantFolding/rnn/multi_rnn_cell/cell_0/gru_cell/candidate/kernel_enter",
        "op": "Const",
        "input": [
          "^rnn/while/rnn/multi_rnn_cell/cell_0/gru_cell/MatMul_1/Enter"
        ],
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_FLOAT",
              "tensorShape": {
                "dim": [
                  {
                    "size": "771"
                  },
                  {
                    "size": "514"
                  }
                ]
              }
            }
          },
          "dtype": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "ConstantFolding/rnn/multi_rnn_cell/cell_0/gru_cell/candidate/bias_enter",
        "op": "Const",
        "input": [
          "^rnn/while/rnn/multi_rnn_cell/cell_0/gru_cell/BiasAdd_1/Enter"
        ],
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_FLOAT",
              "tensorShape": {
                "dim": [
                  {
                    "size": "514"
                  }
                ]
              }
            }
          },
          "dtype": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "ConstantFolding/decode/decoder/multi_rnn_cell/cell_1/gru_cell/candidate/kernel_enter",
        "op": "Const",
        "input": [
          "^decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/MatMul_3/Enter"
        ],
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_FLOAT",
              "tensorShape": {
                "dim": [
                  {
                    "size": "771"
                  },
                  {
                    "size": "514"
                  }
                ]
              }
            }
          },
          "dtype": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "ConstantFolding/decode/decoder/multi_rnn_cell/cell_1/gru_cell/candidate/bias_enter",
        "op": "Const",
        "input": [
          "^decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/BiasAdd_3/Enter"
        ],
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_FLOAT",
              "tensorShape": {
                "dim": [
                  {
                    "size": "514"
                  }
                ]
              }
            }
          },
          "dtype": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "ConstantFolding/decode/decoder/dense/kernel_enter",
        "op": "Const",
        "input": [
          "^decode/decoder/while/BasicDecoderStep/dense/MatMul_1/Enter"
        ],
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_FLOAT",
              "tensorShape": {
                "dim": [
                  {
                    "size": "514"
                  },
                  {
                    "size": "1"
                  }
                ]
              }
            }
          },
          "dtype": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "ConstantFolding/decode/decoder/dense/bias_enter",
        "op": "Const",
        "input": [
          "^decode/decoder/while/BasicDecoderStep/dense/BiasAdd_1/Enter"
        ],
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_FLOAT",
              "tensorShape": {
                "dim": [
                  {
                    "size": "1"
                  }
                ]
              }
            }
          },
          "dtype": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode_1/decoder/while/Merge_6",
        "op": "Merge",
        "input": [
          "decode_1/decoder/while/Enter_6",
          "decode_1/decoder/while/NextIteration_6"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          },
          "N": {
            "i": "2"
          }
        }
      },
      {
        "name": "decode_1/strided_slice",
        "op": "StridedSlice",
        "input": [
          "decode_1/Shape",
          "rnn/TensorArrayUnstack/strided_slice/stack",
          "decode_1/decoder/Const",
          "decode_1/decoder/Const"
        ],
        "attr": {
          "shrink_axis_mask": {
            "i": "1"
          },
          "begin_mask": {
            "i": "0"
          },
          "ellipsis_mask": {
            "i": "0"
          },
          "new_axis_mask": {
            "i": "0"
          },
          "end_mask": {
            "i": "0"
          },
          "Index": {
            "type": "DT_INT32"
          },
          "T": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "decode_1/decoder/while/Enter_2",
        "op": "Enter",
        "input": [
          "decode_1/decoder/TensorArray:1"
        ],
        "attr": {
          "parallel_iterations": {
            "i": "32"
          },
          "frame_name": {
            "s": "ZGVjb2RlXzEvZGVjb2Rlci93aGlsZS93aGlsZV9jb250ZXh0"
          },
          "T": {
            "type": "DT_FLOAT"
          },
          "is_constant": {
            "b": false
          }
        }
      },
      {
        "name": "decode_1/decoder/while/TensorArrayWrite/TensorArrayWriteV3/Enter",
        "op": "Enter",
        "input": [
          "decode_1/decoder/TensorArray"
        ],
        "attr": {
          "T": {
            "type": "DT_RESOURCE"
          },
          "is_constant": {
            "b": true
          },
          "parallel_iterations": {
            "i": "32"
          },
          "frame_name": {
            "s": "ZGVjb2RlXzEvZGVjb2Rlci93aGlsZS93aGlsZV9jb250ZXh0"
          }
        }
      },
      {
        "name": "decode_1/decoder/while/Merge_1",
        "op": "Merge",
        "input": [
          "decode_1/decoder/while/Enter_1",
          "decode_1/decoder/while/NextIteration_1"
        ],
        "attr": {
          "T": {
            "type": "DT_INT32"
          },
          "N": {
            "i": "2"
          }
        }
      },
      {
        "name": "rnn/while/Merge_1",
        "op": "Merge",
        "input": [
          "rnn/while/Enter_1",
          "rnn/while/NextIteration_1"
        ],
        "attr": {
          "T": {
            "type": "DT_INT32"
          },
          "N": {
            "i": "2"
          }
        }
      },
      {
        "name": "rnn/while/Merge",
        "op": "Merge",
        "input": [
          "rnn/while/Enter",
          "rnn/while/NextIteration"
        ],
        "attr": {
          "T": {
            "type": "DT_INT32"
          },
          "N": {
            "i": "2"
          }
        }
      },
      {
        "name": "decode_1/decoder/while/Merge",
        "op": "Merge",
        "input": [
          "decode_1/decoder/while/Enter",
          "decode_1/decoder/while/NextIteration"
        ],
        "attr": {
          "T": {
            "type": "DT_INT32"
          },
          "N": {
            "i": "2"
          }
        }
      },
      {
        "name": "rnn/TensorArrayUnstack/Shape",
        "op": "Shape",
        "input": [
          "rnn/transpose"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          },
          "out_type": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "add_2",
        "op": "Add",
        "input": [
          "max_target_len",
          "decode_1/decoder/TensorArrayStack/range/start"
        ],
        "attr": {
          "T": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "decode_1/decoder/ExpandDims",
        "op": "ExpandDims",
        "input": [
          "decode_1/strided_slice",
          "decode_1/decoder/TensorArrayStack/range/start"
        ],
        "attr": {
          "Tdim": {
            "type": "DT_INT32"
          },
          "T": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "ConstantFolding/decode_1/decoder/Tile/multiples_const_axis",
        "op": "Const",
        "input": [
          "^decode_1/strided_slice"
        ],
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_INT32",
              "tensorShape": {}
            }
          },
          "dtype": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "decode_1/decoder/while/Merge_2",
        "op": "Merge",
        "input": [
          "decode_1/decoder/while/Enter_2",
          "decode_1/decoder/while/NextIteration_2"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          },
          "N": {
            "i": "2"
          }
        }
      },
      {
        "name": "decode_1/decoder/while/Const",
        "op": "Const",
        "input": [
          "^decode_1/decoder/while/Merge"
        ],
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_INT32",
              "tensorShape": {
                "dim": [
                  {
                    "size": "1"
                  }
                ]
              }
            }
          },
          "dtype": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "rnn/TensorArrayUnstack/strided_slice",
        "op": "StridedSlice",
        "input": [
          "rnn/TensorArrayUnstack/Shape",
          "rnn/TensorArrayUnstack/strided_slice/stack",
          "decode_1/decoder/Const",
          "decode_1/decoder/Const"
        ],
        "attr": {
          "T": {
            "type": "DT_INT32"
          },
          "Index": {
            "type": "DT_INT32"
          },
          "shrink_axis_mask": {
            "i": "1"
          },
          "ellipsis_mask": {
            "i": "0"
          },
          "begin_mask": {
            "i": "0"
          },
          "new_axis_mask": {
            "i": "0"
          },
          "end_mask": {
            "i": "0"
          }
        }
      },
      {
        "name": "rnn/strided_slice",
        "op": "StridedSlice",
        "input": [
          "rnn/TensorArrayUnstack/Shape",
          "decode_1/decoder/Const",
          "rnn/strided_slice/stack_1",
          "decode_1/decoder/Const"
        ],
        "attr": {
          "shrink_axis_mask": {
            "i": "1"
          },
          "begin_mask": {
            "i": "0"
          },
          "ellipsis_mask": {
            "i": "0"
          },
          "new_axis_mask": {
            "i": "0"
          },
          "end_mask": {
            "i": "0"
          },
          "T": {
            "type": "DT_INT32"
          },
          "Index": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "decode_1/decoder/while/Less/Enter",
        "op": "Enter",
        "input": [
          "add_2"
        ],
        "attr": {
          "T": {
            "type": "DT_INT32"
          },
          "is_constant": {
            "b": true
          },
          "parallel_iterations": {
            "i": "32"
          },
          "frame_name": {
            "s": "ZGVjb2RlXzEvZGVjb2Rlci93aGlsZS93aGlsZV9jb250ZXh0"
          }
        }
      },
      {
        "name": "decode_1/decoder/LessEqual",
        "op": "LessEqual",
        "input": [
          "add_2",
          "decode_1/decoder/TensorArrayStack/range/start"
        ],
        "attr": {
          "T": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "decode_1/decoder/concat",
        "op": "ConcatV2",
        "input": [
          "decode_1/decoder/ExpandDims",
          "decode_1/decoder/Const",
          "decode_1/decoder/TensorArrayStack/range/start"
        ],
        "attr": {
          "T": {
            "type": "DT_INT32"
          },
          "N": {
            "i": "2"
          },
          "Tidx": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "decode_1/decoder/Tile/multiples",
        "op": "ExpandDims",
        "input": [
          "decode_1/strided_slice",
          "ConstantFolding/decode_1/decoder/Tile/multiples_const_axis"
        ],
        "attr": {
          "T": {
            "type": "DT_INT32"
          },
          "Tdim": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "rnn/TensorArrayUnstack/range",
        "op": "Range",
        "input": [
          "decode_1/decoder/TensorArrayStack/range/start",
          "rnn/TensorArrayUnstack/strided_slice",
          "decode_1/decoder/TensorArrayStack/range/delta"
        ],
        "attr": {
          "Tidx": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "rnn/TensorArray_1",
        "op": "TensorArrayV3",
        "input": [
          "rnn/TensorArrayUnstack/strided_slice"
        ],
        "attr": {
          "identical_element_shapes": {
            "b": true
          },
          "tensor_array_name": {
            "s": "cm5uL2R5bmFtaWNfcm5uL2lucHV0XzA="
          },
          "dtype": {
            "type": "DT_FLOAT"
          },
          "element_shape": {
            "shape": {
              "dim": [
                {
                  "size": "-1"
                },
                {
                  "size": "257"
                }
              ]
            }
          },
          "dynamic_size": {
            "b": false
          },
          "clear_after_read": {
            "b": true
          }
        }
      },
      {
        "name": "rnn/while/Less/Enter",
        "op": "Enter",
        "input": [
          "rnn/TensorArrayUnstack/strided_slice"
        ],
        "attr": {
          "T": {
            "type": "DT_INT32"
          },
          "is_constant": {
            "b": true
          },
          "parallel_iterations": {
            "i": "32"
          },
          "frame_name": {
            "s": "cm5uL3doaWxlL3doaWxlX2NvbnRleHQ="
          }
        }
      },
      {
        "name": "rnn/MultiRNNCellZeroState/GRUCellZeroState_1/ExpandDims",
        "op": "ExpandDims",
        "input": [
          "rnn/strided_slice",
          "decode_1/decoder/TensorArrayStack/range/start"
        ],
        "attr": {
          "T": {
            "type": "DT_INT32"
          },
          "Tdim": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "rnn/while/GreaterEqual/Enter",
        "op": "Enter",
        "input": [
          "add",
          "^rnn/strided_slice"
        ],
        "attr": {
          "parallel_iterations": {
            "i": "32"
          },
          "frame_name": {
            "s": "cm5uL3doaWxlL3doaWxlX2NvbnRleHQ="
          },
          "T": {
            "type": "DT_INT32"
          },
          "is_constant": {
            "b": true
          }
        }
      },
      {
        "name": "rnn/Max",
        "op": "Max",
        "input": [
          "add",
          "rnn/TensorArrayUnstack/strided_slice/stack",
          "^rnn/strided_slice"
        ],
        "attr": {
          "T": {
            "type": "DT_INT32"
          },
          "keep_dims": {
            "b": false
          },
          "Tidx": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "decode_1/decoder/while/Less",
        "op": "Less",
        "input": [
          "decode_1/decoder/while/Merge",
          "decode_1/decoder/while/Less/Enter"
        ],
        "attr": {
          "T": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "decode_1/decoder/zeros",
        "op": "Fill",
        "input": [
          "decode_1/decoder/concat",
          "decode_1/decoder/zeros/Const"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          },
          "index_type": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "decode_1/decoder/Tile",
        "op": "Tile",
        "input": [
          "decode_1/decoder/Tile/input",
          "decode_1/decoder/Tile/multiples"
        ],
        "attr": {
          "Tmultiples": {
            "type": "DT_INT32"
          },
          "T": {
            "type": "DT_BOOL"
          }
        }
      },
      {
        "name": "rnn/while/TensorArrayReadV3/Enter",
        "op": "Enter",
        "input": [
          "rnn/TensorArray_1"
        ],
        "attr": {
          "T": {
            "type": "DT_RESOURCE"
          },
          "is_constant": {
            "b": true
          },
          "parallel_iterations": {
            "i": "32"
          },
          "frame_name": {
            "s": "cm5uL3doaWxlL3doaWxlX2NvbnRleHQ="
          }
        }
      },
      {
        "name": "rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3",
        "op": "TensorArrayScatterV3",
        "input": [
          "rnn/TensorArray_1",
          "rnn/TensorArrayUnstack/range",
          "rnn/transpose",
          "rnn/TensorArray_1:1"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "rnn/while/Less",
        "op": "Less",
        "input": [
          "rnn/while/Merge",
          "rnn/while/Less/Enter"
        ],
        "attr": {
          "T": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "rnn/MultiRNNCellZeroState/GRUCellZeroState_1/concat",
        "op": "ConcatV2",
        "input": [
          "rnn/MultiRNNCellZeroState/GRUCellZeroState_1/ExpandDims",
          "rnn/MultiRNNCellZeroState/GRUCellZeroState_1/Const",
          "decode_1/decoder/TensorArrayStack/range/start"
        ],
        "attr": {
          "T": {
            "type": "DT_INT32"
          },
          "N": {
            "i": "2"
          },
          "Tidx": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "rnn/MultiRNNCellZeroState/GRUCellZeroState/concat",
        "op": "ConcatV2",
        "input": [
          "rnn/MultiRNNCellZeroState/GRUCellZeroState_1/ExpandDims",
          "rnn/MultiRNNCellZeroState/GRUCellZeroState/Const",
          "decode_1/decoder/TensorArrayStack/range/start"
        ],
        "attr": {
          "T": {
            "type": "DT_INT32"
          },
          "N": {
            "i": "2"
          },
          "Tidx": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "rnn/Maximum",
        "op": "Maximum",
        "input": [
          "decode_1/decoder/TensorArrayStack/range/delta",
          "rnn/Max"
        ],
        "attr": {
          "T": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "decode_1/decoder/while/Select_1/Enter",
        "op": "Enter",
        "input": [
          "decode_1/decoder/zeros"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          },
          "is_constant": {
            "b": true
          },
          "parallel_iterations": {
            "i": "32"
          },
          "frame_name": {
            "s": "ZGVjb2RlXzEvZGVjb2Rlci93aGlsZS93aGlsZV9jb250ZXh0"
          }
        }
      },
      {
        "name": "decode_1/decoder/LogicalOr",
        "op": "LogicalOr",
        "input": [
          "decode_1/decoder/Tile",
          "decode_1/decoder/LessEqual"
        ]
      },
      {
        "name": "rnn/while/TensorArrayReadV3/Enter_1",
        "op": "Enter",
        "input": [
          "rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          },
          "is_constant": {
            "b": true
          },
          "parallel_iterations": {
            "i": "32"
          },
          "frame_name": {
            "s": "cm5uL3doaWxlL3doaWxlX2NvbnRleHQ="
          }
        }
      },
      {
        "name": "rnn/MultiRNNCellZeroState/GRUCellZeroState_1/zeros",
        "op": "Fill",
        "input": [
          "rnn/MultiRNNCellZeroState/GRUCellZeroState_1/concat",
          "decode_1/decoder/zeros/Const"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          },
          "index_type": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "rnn/MultiRNNCellZeroState/GRUCellZeroState/zeros",
        "op": "Fill",
        "input": [
          "rnn/MultiRNNCellZeroState/GRUCellZeroState/concat",
          "decode_1/decoder/zeros/Const"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          },
          "index_type": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "rnn/Minimum",
        "op": "Minimum",
        "input": [
          "rnn/TensorArrayUnstack/strided_slice",
          "rnn/Maximum"
        ],
        "attr": {
          "T": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "decode_1/decoder/while/Enter_7",
        "op": "Enter",
        "input": [
          "decode_1/decoder/LogicalOr"
        ],
        "attr": {
          "parallel_iterations": {
            "i": "32"
          },
          "frame_name": {
            "s": "ZGVjb2RlXzEvZGVjb2Rlci93aGlsZS93aGlsZV9jb250ZXh0"
          },
          "T": {
            "type": "DT_BOOL"
          },
          "is_constant": {
            "b": false
          }
        }
      },
      {
        "name": "rnn/while/Enter_4",
        "op": "Enter",
        "input": [
          "rnn/MultiRNNCellZeroState/GRUCellZeroState_1/zeros"
        ],
        "attr": {
          "parallel_iterations": {
            "i": "32"
          },
          "frame_name": {
            "s": "cm5uL3doaWxlL3doaWxlX2NvbnRleHQ="
          },
          "T": {
            "type": "DT_FLOAT"
          },
          "is_constant": {
            "b": false
          }
        }
      },
      {
        "name": "rnn/while/Enter_3",
        "op": "Enter",
        "input": [
          "rnn/MultiRNNCellZeroState/GRUCellZeroState/zeros"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          },
          "is_constant": {
            "b": false
          },
          "parallel_iterations": {
            "i": "32"
          },
          "frame_name": {
            "s": "cm5uL3doaWxlL3doaWxlX2NvbnRleHQ="
          }
        }
      },
      {
        "name": "rnn/while/Less_1/Enter",
        "op": "Enter",
        "input": [
          "rnn/Minimum"
        ],
        "attr": {
          "T": {
            "type": "DT_INT32"
          },
          "is_constant": {
            "b": true
          },
          "parallel_iterations": {
            "i": "32"
          },
          "frame_name": {
            "s": "cm5uL3doaWxlL3doaWxlX2NvbnRleHQ="
          }
        }
      },
      {
        "name": "decode_1/decoder/while/Merge_7",
        "op": "Merge",
        "input": [
          "decode_1/decoder/while/Enter_7",
          "decode_1/decoder/while/NextIteration_7"
        ],
        "attr": {
          "N": {
            "i": "2"
          },
          "T": {
            "type": "DT_BOOL"
          }
        }
      },
      {
        "name": "rnn/while/Merge_4",
        "op": "Merge",
        "input": [
          "rnn/while/Enter_4",
          "rnn/while/NextIteration_4"
        ],
        "attr": {
          "N": {
            "i": "2"
          },
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "rnn/while/Merge_3",
        "op": "Merge",
        "input": [
          "rnn/while/Enter_3",
          "rnn/while/NextIteration_3"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          },
          "N": {
            "i": "2"
          }
        }
      },
      {
        "name": "rnn/while/Less_1",
        "op": "Less",
        "input": [
          "rnn/while/Merge_1",
          "rnn/while/Less_1/Enter"
        ],
        "attr": {
          "T": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "decode_1/decoder/while/All",
        "op": "All",
        "input": [
          "decode_1/decoder/while/Merge_7",
          "decode_1/decoder/while/Const"
        ],
        "attr": {
          "keep_dims": {
            "b": false
          },
          "Tidx": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "rnn/while/LogicalAnd",
        "op": "LogicalAnd",
        "input": [
          "rnn/while/Less",
          "rnn/while/Less_1"
        ]
      },
      {
        "name": "decode_1/decoder/while/LogicalNot",
        "op": "LogicalNot",
        "input": [
          "decode_1/decoder/while/All"
        ]
      },
      {
        "name": "rnn/while/LoopCond",
        "op": "LoopCond",
        "input": [
          "rnn/while/LogicalAnd"
        ]
      },
      {
        "name": "decode_1/decoder/while/LogicalAnd",
        "op": "LogicalAnd",
        "input": [
          "decode_1/decoder/while/Less",
          "decode_1/decoder/while/LogicalNot"
        ]
      },
      {
        "name": "rnn/while/Switch_4",
        "op": "Switch",
        "input": [
          "rnn/while/Merge_4",
          "rnn/while/LoopCond"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "rnn/while/Switch_1",
        "op": "Switch",
        "input": [
          "rnn/while/Merge_1",
          "rnn/while/LoopCond"
        ],
        "attr": {
          "T": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "rnn/while/Switch",
        "op": "Switch",
        "input": [
          "rnn/while/Merge",
          "rnn/while/LoopCond"
        ],
        "attr": {
          "T": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "rnn/while/Switch_3",
        "op": "Switch",
        "input": [
          "rnn/while/Merge_3",
          "rnn/while/LoopCond"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode_1/decoder/while/LoopCond",
        "op": "LoopCond",
        "input": [
          "decode_1/decoder/while/LogicalAnd"
        ]
      },
      {
        "name": "rnn/while/Exit_4",
        "op": "Exit",
        "input": [
          "rnn/while/Switch_4"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "rnn/while/GreaterEqual",
        "op": "GreaterEqual",
        "input": [
          "rnn/while/Switch_1:1",
          "rnn/while/GreaterEqual/Enter"
        ],
        "attr": {
          "T": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "rnn/while/TensorArrayReadV3",
        "op": "TensorArrayReadV3",
        "input": [
          "rnn/while/TensorArrayReadV3/Enter",
          "rnn/while/Switch_1:1",
          "rnn/while/TensorArrayReadV3/Enter_1"
        ],
        "attr": {
          "dtype": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "rnn/while/Identity",
        "op": "Identity",
        "input": [
          "rnn/while/Switch:1"
        ],
        "attr": {
          "T": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "rnn/while/Exit_3",
        "op": "Exit",
        "input": [
          "rnn/while/Switch_3"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode_1/decoder/while/Switch_1",
        "op": "Switch",
        "input": [
          "decode_1/decoder/while/Merge_1",
          "decode_1/decoder/while/LoopCond"
        ],
        "attr": {
          "T": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "decode_1/decoder/while/Switch_6",
        "op": "Switch",
        "input": [
          "decode_1/decoder/while/Merge_6",
          "decode_1/decoder/while/LoopCond"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode_1/decoder/while/Switch_7",
        "op": "Switch",
        "input": [
          "decode_1/decoder/while/Merge_7",
          "decode_1/decoder/while/LoopCond"
        ],
        "attr": {
          "T": {
            "type": "DT_BOOL"
          }
        }
      },
      {
        "name": "decode_1/decoder/while/Switch",
        "op": "Switch",
        "input": [
          "decode_1/decoder/while/Merge",
          "decode_1/decoder/while/LoopCond"
        ],
        "attr": {
          "T": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "decode_1/decoder/while/Switch_2",
        "op": "Switch",
        "input": [
          "decode_1/decoder/while/Merge_2",
          "decode_1/decoder/while/LoopCond"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode_1/decoder/while/Enter_4",
        "op": "Enter",
        "input": [
          "rnn/while/Exit_4"
        ],
        "attr": {
          "parallel_iterations": {
            "i": "32"
          },
          "frame_name": {
            "s": "ZGVjb2RlXzEvZGVjb2Rlci93aGlsZS93aGlsZV9jb250ZXh0"
          },
          "T": {
            "type": "DT_FLOAT"
          },
          "is_constant": {
            "b": false
          }
        }
      },
      {
        "name": "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/sub/x",
        "op": "Const",
        "input": [
          "^rnn/while/Identity"
        ],
        "attr": {
          "dtype": {
            "type": "DT_FLOAT"
          },
          "value": {
            "tensor": {
              "dtype": "DT_FLOAT",
              "tensorShape": {}
            }
          }
        }
      },
      {
        "name": "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/split/split_dim",
        "op": "Const",
        "input": [
          "^rnn/while/Identity"
        ],
        "attr": {
          "dtype": {
            "type": "DT_INT32"
          },
          "value": {
            "tensor": {
              "dtype": "DT_INT32",
              "tensorShape": {}
            }
          }
        }
      },
      {
        "name": "decode_1/decoder/while/Enter_5",
        "op": "Enter",
        "input": [
          "rnn/while/Exit_3"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          },
          "is_constant": {
            "b": false
          },
          "parallel_iterations": {
            "i": "32"
          },
          "frame_name": {
            "s": "ZGVjb2RlXzEvZGVjb2Rlci93aGlsZS93aGlsZV9jb250ZXh0"
          }
        }
      },
      {
        "name": "decode_1/decoder/while/Identity",
        "op": "Identity",
        "input": [
          "decode_1/decoder/while/Switch:1"
        ],
        "attr": {
          "T": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "decode_1/decoder/while/Exit_2",
        "op": "Exit",
        "input": [
          "decode_1/decoder/while/Switch_2"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode_1/decoder/while/Merge_4",
        "op": "Merge",
        "input": [
          "decode_1/decoder/while/Enter_4",
          "decode_1/decoder/while/NextIteration_4"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          },
          "N": {
            "i": "2"
          }
        }
      },
      {
        "name": "rnn/while/rnn/multi_rnn_cell/cell_0/gru_cell/concat",
        "op": "ConcatV2",
        "input": [
          "rnn/while/TensorArrayReadV3",
          "rnn/while/Switch_3:1",
          "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/split/split_dim"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          },
          "N": {
            "i": "2"
          },
          "Tidx": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "rnn/while/add",
        "op": "Add",
        "input": [
          "rnn/while/Identity",
          "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/split/split_dim"
        ],
        "attr": {
          "T": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "rnn/while/add_1",
        "op": "Add",
        "input": [
          "rnn/while/Switch_1:1",
          "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/split/split_dim"
        ],
        "attr": {
          "T": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "decode_1/decoder/while/Merge_5",
        "op": "Merge",
        "input": [
          "decode_1/decoder/while/Enter_5",
          "decode_1/decoder/while/NextIteration_5"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          },
          "N": {
            "i": "2"
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/sub_1/x",
        "op": "Const",
        "input": [
          "^decode_1/decoder/while/Identity"
        ],
        "attr": {
          "dtype": {
            "type": "DT_FLOAT"
          },
          "value": {
            "tensor": {
              "dtype": "DT_FLOAT",
              "tensorShape": {}
            }
          }
        }
      },
      {
        "name": "decode_1/decoder/while/LogicalOr/x",
        "op": "Const",
        "input": [
          "^decode_1/decoder/while/Identity"
        ],
        "attr": {
          "value": {
            "tensor": {
              "dtype": "DT_BOOL",
              "tensorShape": {}
            }
          },
          "dtype": {
            "type": "DT_BOOL"
          }
        }
      },
      {
        "name": "decode_1/decoder/while/add_2/y",
        "op": "Const",
        "input": [
          "^decode_1/decoder/while/Identity"
        ],
        "attr": {
          "dtype": {
            "type": "DT_INT32"
          },
          "value": {
            "tensor": {
              "dtype": "DT_INT32",
              "tensorShape": {}
            }
          }
        }
      },
      {
        "name": "decode_1/decoder/TensorArrayStack/TensorArraySizeV3",
        "op": "TensorArraySizeV3",
        "input": [
          "decode_1/decoder/TensorArray",
          "decode_1/decoder/while/Exit_2"
        ]
      },
      {
        "name": "decode_1/decoder/while/Switch_4",
        "op": "Switch",
        "input": [
          "decode_1/decoder/while/Merge_4",
          "decode_1/decoder/while/LoopCond"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "rnn/while/rnn/multi_rnn_cell/cell_0/gru_cell/MatMul",
        "op": "MatMul",
        "input": [
          "rnn/while/rnn/multi_rnn_cell/cell_0/gru_cell/concat",
          "ConstantFolding/rnn/multi_rnn_cell/cell_0/gru_cell/gates/kernel_enter"
        ],
        "attr": {
          "transpose_a": {
            "b": false
          },
          "transpose_b": {
            "b": false
          },
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "rnn/while/NextIteration",
        "op": "NextIteration",
        "input": [
          "rnn/while/add"
        ],
        "attr": {
          "T": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "rnn/while/NextIteration_1",
        "op": "NextIteration",
        "input": [
          "rnn/while/add_1"
        ],
        "attr": {
          "T": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "decode_1/decoder/while/Switch_5",
        "op": "Switch",
        "input": [
          "decode_1/decoder/while/Merge_5",
          "decode_1/decoder/while/LoopCond"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode_1/decoder/while/LogicalOr",
        "op": "LogicalOr",
        "input": [
          "decode_1/decoder/while/LogicalOr/x",
          "decode_1/decoder/while/Switch_7:1"
        ]
      },
      {
        "name": "decode_1/decoder/while/add_2",
        "op": "Add",
        "input": [
          "decode_1/decoder/while/Switch_1:1",
          "decode_1/decoder/while/add_2/y"
        ],
        "attr": {
          "T": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "decode_1/decoder/while/add",
        "op": "Add",
        "input": [
          "decode_1/decoder/while/Identity",
          "decode_1/decoder/while/add_2/y"
        ],
        "attr": {
          "T": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "decode_1/decoder/TensorArrayStack/range",
        "op": "Range",
        "input": [
          "decode_1/decoder/TensorArrayStack/range/start",
          "decode_1/decoder/TensorArrayStack/TensorArraySizeV3",
          "decode_1/decoder/TensorArrayStack/range/delta"
        ],
        "attr": {
          "Tidx": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/gru_cell/concat_2",
        "op": "ConcatV2",
        "input": [
          "decode_1/decoder/while/Switch_6:1",
          "decode_1/decoder/while/Switch_4:1",
          "decode_1/decoder/while/add_2/y"
        ],
        "attr": {
          "Tidx": {
            "type": "DT_INT32"
          },
          "T": {
            "type": "DT_FLOAT"
          },
          "N": {
            "i": "2"
          }
        }
      },
      {
        "name": "rnn/while/rnn/multi_rnn_cell/cell_0/gru_cell/BiasAdd",
        "op": "BiasAdd",
        "input": [
          "rnn/while/rnn/multi_rnn_cell/cell_0/gru_cell/MatMul",
          "ConstantFolding/rnn/multi_rnn_cell/cell_0/gru_cell/gates/bias_enter"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          },
          "data_format": {
            "s": "TkhXQw=="
          }
        }
      },
      {
        "name": "decode_1/decoder/while/NextIteration_7",
        "op": "NextIteration",
        "input": [
          "decode_1/decoder/while/LogicalOr"
        ],
        "attr": {
          "T": {
            "type": "DT_BOOL"
          }
        }
      },
      {
        "name": "decode_1/decoder/while/NextIteration_1",
        "op": "NextIteration",
        "input": [
          "decode_1/decoder/while/add_2"
        ],
        "attr": {
          "T": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "decode_1/decoder/while/NextIteration",
        "op": "NextIteration",
        "input": [
          "decode_1/decoder/while/add"
        ],
        "attr": {
          "T": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "decode_1/decoder/TensorArrayStack/TensorArrayGatherV3",
        "op": "TensorArrayGatherV3",
        "input": [
          "decode_1/decoder/TensorArray",
          "decode_1/decoder/TensorArrayStack/range",
          "decode_1/decoder/while/Exit_2"
        ],
        "attr": {
          "element_shape": {
            "shape": {
              "dim": [
                {
                  "size": "-1"
                },
                {
                  "size": "1"
                }
              ]
            }
          },
          "dtype": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/gru_cell/MatMul_2",
        "op": "MatMul",
        "input": [
          "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/gru_cell/concat_2",
          "ConstantFolding/decode/decoder/multi_rnn_cell/cell_0/gru_cell/gates/kernel_enter"
        ],
        "attr": {
          "transpose_b": {
            "b": false
          },
          "T": {
            "type": "DT_FLOAT"
          },
          "transpose_a": {
            "b": false
          }
        }
      },
      {
        "name": "rnn/while/rnn/multi_rnn_cell/cell_0/gru_cell/Sigmoid",
        "op": "Sigmoid",
        "input": [
          "rnn/while/rnn/multi_rnn_cell/cell_0/gru_cell/BiasAdd"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode_1/decoder/transpose",
        "op": "Transpose",
        "input": [
          "decode_1/decoder/TensorArrayStack/TensorArrayGatherV3",
          "rnn/concat"
        ],
        "attr": {
          "Tperm": {
            "type": "DT_INT32"
          },
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/gru_cell/BiasAdd_2",
        "op": "BiasAdd",
        "input": [
          "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/gru_cell/MatMul_2",
          "ConstantFolding/decode/decoder/multi_rnn_cell/cell_0/gru_cell/gates/bias_enter"
        ],
        "attr": {
          "data_format": {
            "s": "TkhXQw=="
          },
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "rnn/while/rnn/multi_rnn_cell/cell_0/gru_cell/split",
        "op": "Split",
        "input": [
          "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/split/split_dim",
          "rnn/while/rnn/multi_rnn_cell/cell_0/gru_cell/Sigmoid"
        ],
        "attr": {
          "num_split": {
            "i": "2"
          },
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/gru_cell/Sigmoid_1",
        "op": "Sigmoid",
        "input": [
          "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/gru_cell/BiasAdd_2"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "rnn/while/rnn/multi_rnn_cell/cell_0/gru_cell/mul_1",
        "op": "Mul",
        "input": [
          "rnn/while/rnn/multi_rnn_cell/cell_0/gru_cell/split:1",
          "rnn/while/Switch_3:1"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "rnn/while/rnn/multi_rnn_cell/cell_0/gru_cell/sub",
        "op": "Sub",
        "input": [
          "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/sub/x",
          "rnn/while/rnn/multi_rnn_cell/cell_0/gru_cell/split:1"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "rnn/while/rnn/multi_rnn_cell/cell_0/gru_cell/mul",
        "op": "Mul",
        "input": [
          "rnn/while/rnn/multi_rnn_cell/cell_0/gru_cell/split",
          "rnn/while/Switch_3:1"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/gru_cell/split_1",
        "op": "Split",
        "input": [
          "decode_1/decoder/while/add_2/y",
          "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/gru_cell/Sigmoid_1"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          },
          "num_split": {
            "i": "2"
          }
        }
      },
      {
        "name": "rnn/while/rnn/multi_rnn_cell/cell_0/gru_cell/concat_1",
        "op": "ConcatV2",
        "input": [
          "rnn/while/TensorArrayReadV3",
          "rnn/while/rnn/multi_rnn_cell/cell_0/gru_cell/mul",
          "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/split/split_dim"
        ],
        "attr": {
          "Tidx": {
            "type": "DT_INT32"
          },
          "T": {
            "type": "DT_FLOAT"
          },
          "N": {
            "i": "2"
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/gru_cell/mul_4",
        "op": "Mul",
        "input": [
          "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/gru_cell/split_1:1",
          "decode_1/decoder/while/Switch_4:1"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/gru_cell/sub_1",
        "op": "Sub",
        "input": [
          "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/sub_1/x",
          "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/gru_cell/split_1:1"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/gru_cell/mul_3",
        "op": "Mul",
        "input": [
          "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/gru_cell/split_1",
          "decode_1/decoder/while/Switch_4:1"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "rnn/while/rnn/multi_rnn_cell/cell_0/gru_cell/MatMul_1",
        "op": "MatMul",
        "input": [
          "rnn/while/rnn/multi_rnn_cell/cell_0/gru_cell/concat_1",
          "ConstantFolding/rnn/multi_rnn_cell/cell_0/gru_cell/candidate/kernel_enter"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          },
          "transpose_a": {
            "b": false
          },
          "transpose_b": {
            "b": false
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/gru_cell/concat_3",
        "op": "ConcatV2",
        "input": [
          "decode_1/decoder/while/Switch_6:1",
          "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/gru_cell/mul_3",
          "decode_1/decoder/while/add_2/y"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          },
          "N": {
            "i": "2"
          },
          "Tidx": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "rnn/while/rnn/multi_rnn_cell/cell_0/gru_cell/BiasAdd_1",
        "op": "BiasAdd",
        "input": [
          "rnn/while/rnn/multi_rnn_cell/cell_0/gru_cell/MatMul_1",
          "ConstantFolding/rnn/multi_rnn_cell/cell_0/gru_cell/candidate/bias_enter"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          },
          "data_format": {
            "s": "TkhXQw=="
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/gru_cell/MatMul_3",
        "op": "MatMul",
        "input": [
          "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/gru_cell/concat_3",
          "ConstantFolding/decode/decoder/multi_rnn_cell/cell_0/gru_cell/candidate/kernel_enter"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          },
          "transpose_a": {
            "b": false
          },
          "transpose_b": {
            "b": false
          }
        }
      },
      {
        "name": "rnn/while/rnn/multi_rnn_cell/cell_0/gru_cell/Relu",
        "op": "Relu",
        "input": [
          "rnn/while/rnn/multi_rnn_cell/cell_0/gru_cell/BiasAdd_1"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/gru_cell/BiasAdd_3",
        "op": "BiasAdd",
        "input": [
          "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/gru_cell/MatMul_3",
          "ConstantFolding/decode/decoder/multi_rnn_cell/cell_0/gru_cell/candidate/bias_enter"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          },
          "data_format": {
            "s": "TkhXQw=="
          }
        }
      },
      {
        "name": "rnn/while/rnn/multi_rnn_cell/cell_0/gru_cell/mul_2",
        "op": "Mul",
        "input": [
          "rnn/while/rnn/multi_rnn_cell/cell_0/gru_cell/sub",
          "rnn/while/rnn/multi_rnn_cell/cell_0/gru_cell/Relu"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/gru_cell/Relu_1",
        "op": "Relu",
        "input": [
          "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/gru_cell/BiasAdd_3"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "rnn/while/rnn/multi_rnn_cell/cell_0/gru_cell/add",
        "op": "Add",
        "input": [
          "rnn/while/rnn/multi_rnn_cell/cell_0/gru_cell/mul_1",
          "rnn/while/rnn/multi_rnn_cell/cell_0/gru_cell/mul_2"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/gru_cell/mul_5",
        "op": "Mul",
        "input": [
          "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/gru_cell/sub_1",
          "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/gru_cell/Relu_1"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/concat",
        "op": "ConcatV2",
        "input": [
          "rnn/while/rnn/multi_rnn_cell/cell_0/gru_cell/add",
          "rnn/while/Switch_4:1",
          "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/split/split_dim"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          },
          "N": {
            "i": "2"
          },
          "Tidx": {
            "type": "DT_INT32"
          }
        }
      },
      {
        "name": "rnn/while/Select_1",
        "op": "Select",
        "input": [
          "rnn/while/GreaterEqual",
          "rnn/while/Switch_3:1",
          "rnn/while/rnn/multi_rnn_cell/cell_0/gru_cell/add"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/gru_cell/add_1",
        "op": "Add",
        "input": [
          "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/gru_cell/mul_4",
          "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/gru_cell/mul_5"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/MatMul",
        "op": "MatMul",
        "input": [
          "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/concat",
          "ConstantFolding/rnn/multi_rnn_cell/cell_1/gru_cell/gates/kernel_enter"
        ],
        "attr": {
          "transpose_b": {
            "b": false
          },
          "T": {
            "type": "DT_FLOAT"
          },
          "transpose_a": {
            "b": false
          }
        }
      },
      {
        "name": "rnn/while/NextIteration_3",
        "op": "NextIteration",
        "input": [
          "rnn/while/Select_1"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode_1/decoder/while/Select_3",
        "op": "Select",
        "input": [
          "decode_1/decoder/while/Switch_7:1",
          "decode_1/decoder/while/Switch_4:1",
          "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/gru_cell/add_1"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/concat_2",
        "op": "ConcatV2",
        "input": [
          "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/gru_cell/add_1",
          "decode_1/decoder/while/Switch_5:1",
          "decode_1/decoder/while/add_2/y"
        ],
        "attr": {
          "N": {
            "i": "2"
          },
          "Tidx": {
            "type": "DT_INT32"
          },
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/BiasAdd",
        "op": "BiasAdd",
        "input": [
          "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/MatMul",
          "ConstantFolding/rnn/multi_rnn_cell/cell_1/gru_cell/gates/bias_enter"
        ],
        "attr": {
          "data_format": {
            "s": "TkhXQw=="
          },
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode_1/decoder/while/NextIteration_4",
        "op": "NextIteration",
        "input": [
          "decode_1/decoder/while/Select_3"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/MatMul_2",
        "op": "MatMul",
        "input": [
          "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/concat_2",
          "ConstantFolding/decode/decoder/multi_rnn_cell/cell_1/gru_cell/gates/kernel_enter"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          },
          "transpose_a": {
            "b": false
          },
          "transpose_b": {
            "b": false
          }
        }
      },
      {
        "name": "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/Sigmoid",
        "op": "Sigmoid",
        "input": [
          "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/BiasAdd"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/BiasAdd_2",
        "op": "BiasAdd",
        "input": [
          "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/MatMul_2",
          "ConstantFolding/decode/decoder/multi_rnn_cell/cell_1/gru_cell/gates/bias_enter"
        ],
        "attr": {
          "data_format": {
            "s": "TkhXQw=="
          },
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/split",
        "op": "Split",
        "input": [
          "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/split/split_dim",
          "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/Sigmoid"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          },
          "num_split": {
            "i": "2"
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/Sigmoid_1",
        "op": "Sigmoid",
        "input": [
          "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/BiasAdd_2"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/mul_1",
        "op": "Mul",
        "input": [
          "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/split:1",
          "rnn/while/Switch_4:1"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/sub",
        "op": "Sub",
        "input": [
          "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/sub/x",
          "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/split:1"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/mul",
        "op": "Mul",
        "input": [
          "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/split",
          "rnn/while/Switch_4:1"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/split_1",
        "op": "Split",
        "input": [
          "decode_1/decoder/while/add_2/y",
          "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/Sigmoid_1"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          },
          "num_split": {
            "i": "2"
          }
        }
      },
      {
        "name": "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/concat_1",
        "op": "ConcatV2",
        "input": [
          "rnn/while/rnn/multi_rnn_cell/cell_0/gru_cell/add",
          "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/mul",
          "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/split/split_dim"
        ],
        "attr": {
          "Tidx": {
            "type": "DT_INT32"
          },
          "T": {
            "type": "DT_FLOAT"
          },
          "N": {
            "i": "2"
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/mul_4",
        "op": "Mul",
        "input": [
          "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/split_1:1",
          "decode_1/decoder/while/Switch_5:1"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/sub_1",
        "op": "Sub",
        "input": [
          "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/sub_1/x",
          "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/split_1:1"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/mul_3",
        "op": "Mul",
        "input": [
          "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/split_1",
          "decode_1/decoder/while/Switch_5:1"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/MatMul_1",
        "op": "MatMul",
        "input": [
          "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/concat_1",
          "ConstantFolding/rnn/multi_rnn_cell/cell_1/gru_cell/candidate/kernel_enter"
        ],
        "attr": {
          "transpose_b": {
            "b": false
          },
          "T": {
            "type": "DT_FLOAT"
          },
          "transpose_a": {
            "b": false
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/concat_3",
        "op": "ConcatV2",
        "input": [
          "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/gru_cell/add_1",
          "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/mul_3",
          "decode_1/decoder/while/add_2/y"
        ],
        "attr": {
          "N": {
            "i": "2"
          },
          "Tidx": {
            "type": "DT_INT32"
          },
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/BiasAdd_1",
        "op": "BiasAdd",
        "input": [
          "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/MatMul_1",
          "ConstantFolding/rnn/multi_rnn_cell/cell_1/gru_cell/candidate/bias_enter"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          },
          "data_format": {
            "s": "TkhXQw=="
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/MatMul_3",
        "op": "MatMul",
        "input": [
          "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/concat_3",
          "ConstantFolding/decode/decoder/multi_rnn_cell/cell_1/gru_cell/candidate/kernel_enter"
        ],
        "attr": {
          "transpose_b": {
            "b": false
          },
          "T": {
            "type": "DT_FLOAT"
          },
          "transpose_a": {
            "b": false
          }
        }
      },
      {
        "name": "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/Relu",
        "op": "Relu",
        "input": [
          "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/BiasAdd_1"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/BiasAdd_3",
        "op": "BiasAdd",
        "input": [
          "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/MatMul_3",
          "ConstantFolding/decode/decoder/multi_rnn_cell/cell_1/gru_cell/candidate/bias_enter"
        ],
        "attr": {
          "data_format": {
            "s": "TkhXQw=="
          },
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/mul_2",
        "op": "Mul",
        "input": [
          "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/sub",
          "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/Relu"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/Relu_1",
        "op": "Relu",
        "input": [
          "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/BiasAdd_3"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/add",
        "op": "Add",
        "input": [
          "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/mul_1",
          "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/mul_2"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/mul_5",
        "op": "Mul",
        "input": [
          "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/sub_1",
          "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/Relu_1"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "rnn/while/Select_2",
        "op": "Select",
        "input": [
          "rnn/while/GreaterEqual",
          "rnn/while/Switch_4:1",
          "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/add"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/add_1",
        "op": "Add",
        "input": [
          "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/mul_4",
          "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/mul_5"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "rnn/while/NextIteration_4",
        "op": "NextIteration",
        "input": [
          "rnn/while/Select_2"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode_1/decoder/while/Select_4",
        "op": "Select",
        "input": [
          "decode_1/decoder/while/Switch_7:1",
          "decode_1/decoder/while/Switch_5:1",
          "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/add_1"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/dense/MatMul_1",
        "op": "MatMul",
        "input": [
          "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/add_1",
          "ConstantFolding/decode/decoder/dense/kernel_enter"
        ],
        "attr": {
          "transpose_b": {
            "b": false
          },
          "T": {
            "type": "DT_FLOAT"
          },
          "transpose_a": {
            "b": false
          }
        }
      },
      {
        "name": "decode_1/decoder/while/NextIteration_5",
        "op": "NextIteration",
        "input": [
          "decode_1/decoder/while/Select_4"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode/decoder/while/BasicDecoderStep/dense/BiasAdd_1",
        "op": "BiasAdd",
        "input": [
          "decode/decoder/while/BasicDecoderStep/dense/MatMul_1",
          "ConstantFolding/decode/decoder/dense/bias_enter"
        ],
        "attr": {
          "data_format": {
            "s": "TkhXQw=="
          },
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode_1/decoder/while/NextIteration_6",
        "op": "NextIteration",
        "input": [
          "decode/decoder/while/BasicDecoderStep/dense/BiasAdd_1"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode_1/decoder/while/Select_1",
        "op": "Select",
        "input": [
          "decode_1/decoder/while/Switch_7:1",
          "decode_1/decoder/while/Select_1/Enter",
          "decode/decoder/while/BasicDecoderStep/dense/BiasAdd_1"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode_1/decoder/while/TensorArrayWrite/TensorArrayWriteV3",
        "op": "TensorArrayWriteV3",
        "input": [
          "decode_1/decoder/while/TensorArrayWrite/TensorArrayWriteV3/Enter",
          "decode_1/decoder/while/Switch_1:1",
          "decode_1/decoder/while/Select_1",
          "decode_1/decoder/while/Switch_2:1"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      },
      {
        "name": "decode_1/decoder/while/NextIteration_2",
        "op": "NextIteration",
        "input": [
          "decode_1/decoder/while/TensorArrayWrite/TensorArrayWriteV3"
        ],
        "attr": {
          "T": {
            "type": "DT_FLOAT"
          }
        }
      }
    ],
    "library": {},
    "versions": {}
  },
  "weightsManifest": [
    {
      "paths": [
        "group1-shard1of7",
        "group1-shard2of7",
        "group1-shard3of7",
        "group1-shard4of7",
        "group1-shard5of7",
        "group1-shard6of7",
        "group1-shard7of7"
      ],
      "weights": [
        {
          "name": "decode/decoder/multi_rnn_cell/cell_0/gru_cell/gates/kernel",
          "shape": [
            258,
            514
          ],
          "dtype": "float32"
        },
        {
          "name": "decode/decoder/multi_rnn_cell/cell_0/gru_cell/gates/bias",
          "shape": [
            514
          ],
          "dtype": "float32"
        },
        {
          "name": "rnn/MultiRNNCellZeroState/GRUCellZeroState_1/Const",
          "shape": [
            1
          ],
          "dtype": "int32"
        },
        {
          "name": "rnn/multi_rnn_cell/cell_1/gru_cell/gates/kernel",
          "shape": [
            771,
            514
          ],
          "dtype": "float32"
        },
        {
          "name": "rnn/multi_rnn_cell/cell_1/gru_cell/gates/bias",
          "shape": [
            514
          ],
          "dtype": "float32"
        },
        {
          "name": "rnn/multi_rnn_cell/cell_1/gru_cell/candidate/kernel",
          "shape": [
            771,
            257
          ],
          "dtype": "float32"
        },
        {
          "name": "rnn/multi_rnn_cell/cell_1/gru_cell/candidate/bias",
          "shape": [
            257
          ],
          "dtype": "float32"
        },
        {
          "name": "decode/decoder/multi_rnn_cell/cell_0/gru_cell/candidate/kernel",
          "shape": [
            258,
            257
          ],
          "dtype": "float32"
        },
        {
          "name": "decode/decoder/multi_rnn_cell/cell_0/gru_cell/candidate/bias",
          "shape": [
            257
          ],
          "dtype": "float32"
        },
        {
          "name": "decode/decoder/multi_rnn_cell/cell_1/gru_cell/gates/kernel",
          "shape": [
            771,
            1028
          ],
          "dtype": "float32"
        },
        {
          "name": "decode/decoder/multi_rnn_cell/cell_1/gru_cell/gates/bias",
          "shape": [
            1028
          ],
          "dtype": "float32"
        },
        {
          "name": "rnn/MultiRNNCellZeroState/GRUCellZeroState/Const",
          "shape": [
            1
          ],
          "dtype": "int32"
        },
        {
          "name": "decode_1/decoder/zeros/Const",
          "shape": [],
          "dtype": "float32"
        },
        {
          "name": "rnn/multi_rnn_cell/cell_0/gru_cell/gates/kernel",
          "shape": [
            771,
            1028
          ],
          "dtype": "float32"
        },
        {
          "name": "rnn/multi_rnn_cell/cell_0/gru_cell/gates/bias",
          "shape": [
            1028
          ],
          "dtype": "float32"
        },
        {
          "name": "rnn/multi_rnn_cell/cell_0/gru_cell/candidate/kernel",
          "shape": [
            771,
            514
          ],
          "dtype": "float32"
        },
        {
          "name": "rnn/multi_rnn_cell/cell_0/gru_cell/candidate/bias",
          "shape": [
            514
          ],
          "dtype": "float32"
        },
        {
          "name": "decode_1/decoder/TensorArrayStack/range/delta",
          "shape": [],
          "dtype": "int32"
        },
        {
          "name": "rnn/strided_slice/stack_1",
          "shape": [
            1
          ],
          "dtype": "int32"
        },
        {
          "name": "decode/decoder/multi_rnn_cell/cell_1/gru_cell/candidate/kernel",
          "shape": [
            771,
            514
          ],
          "dtype": "float32"
        },
        {
          "name": "decode/decoder/multi_rnn_cell/cell_1/gru_cell/candidate/bias",
          "shape": [
            514
          ],
          "dtype": "float32"
        },
        {
          "name": "decode/decoder/dense/kernel",
          "shape": [
            514,
            1
          ],
          "dtype": "float32"
        },
        {
          "name": "decode/decoder/dense/bias",
          "shape": [
            1
          ],
          "dtype": "float32"
        },
        {
          "name": "decode_1/decoder/Tile/input",
          "shape": [
            1
          ],
          "dtype": "bool"
        },
        {
          "name": "decode_1/decoder/Const",
          "shape": [
            1
          ],
          "dtype": "int32"
        },
        {
          "name": "rnn/TensorArrayUnstack/strided_slice/stack",
          "shape": [
            1
          ],
          "dtype": "int32"
        },
        {
          "name": "decode_1/decoder/TensorArrayStack/range/start",
          "shape": [],
          "dtype": "int32"
        },
        {
          "name": "rnn/concat",
          "shape": [
            3
          ],
          "dtype": "int32"
        },
        {
          "name": "ConstantFolding/decode/decoder/multi_rnn_cell/cell_0/gru_cell/gates/kernel_enter",
          "shape": [
            258,
            514
          ],
          "dtype": "float32"
        },
        {
          "name": "ConstantFolding/decode/decoder/multi_rnn_cell/cell_0/gru_cell/gates/bias_enter",
          "shape": [
            514
          ],
          "dtype": "float32"
        },
        {
          "name": "ConstantFolding/rnn/multi_rnn_cell/cell_1/gru_cell/gates/kernel_enter",
          "shape": [
            771,
            514
          ],
          "dtype": "float32"
        },
        {
          "name": "ConstantFolding/rnn/multi_rnn_cell/cell_1/gru_cell/gates/bias_enter",
          "shape": [
            514
          ],
          "dtype": "float32"
        },
        {
          "name": "ConstantFolding/rnn/multi_rnn_cell/cell_1/gru_cell/candidate/kernel_enter",
          "shape": [
            771,
            257
          ],
          "dtype": "float32"
        },
        {
          "name": "ConstantFolding/rnn/multi_rnn_cell/cell_1/gru_cell/candidate/bias_enter",
          "shape": [
            257
          ],
          "dtype": "float32"
        },
        {
          "name": "ConstantFolding/decode/decoder/multi_rnn_cell/cell_0/gru_cell/candidate/kernel_enter",
          "shape": [
            258,
            257
          ],
          "dtype": "float32"
        },
        {
          "name": "ConstantFolding/decode/decoder/multi_rnn_cell/cell_0/gru_cell/candidate/bias_enter",
          "shape": [
            257
          ],
          "dtype": "float32"
        },
        {
          "name": "ConstantFolding/decode/decoder/multi_rnn_cell/cell_1/gru_cell/gates/kernel_enter",
          "shape": [
            771,
            1028
          ],
          "dtype": "float32"
        },
        {
          "name": "ConstantFolding/decode/decoder/multi_rnn_cell/cell_1/gru_cell/gates/bias_enter",
          "shape": [
            1028
          ],
          "dtype": "float32"
        },
        {
          "name": "ConstantFolding/rnn/multi_rnn_cell/cell_0/gru_cell/gates/kernel_enter",
          "shape": [
            771,
            1028
          ],
          "dtype": "float32"
        },
        {
          "name": "ConstantFolding/rnn/multi_rnn_cell/cell_0/gru_cell/gates/bias_enter",
          "shape": [
            1028
          ],
          "dtype": "float32"
        },
        {
          "name": "ConstantFolding/rnn/multi_rnn_cell/cell_0/gru_cell/candidate/kernel_enter",
          "shape": [
            771,
            514
          ],
          "dtype": "float32"
        },
        {
          "name": "ConstantFolding/rnn/multi_rnn_cell/cell_0/gru_cell/candidate/bias_enter",
          "shape": [
            514
          ],
          "dtype": "float32"
        },
        {
          "name": "ConstantFolding/decode/decoder/multi_rnn_cell/cell_1/gru_cell/candidate/kernel_enter",
          "shape": [
            771,
            514
          ],
          "dtype": "float32"
        },
        {
          "name": "ConstantFolding/decode/decoder/multi_rnn_cell/cell_1/gru_cell/candidate/bias_enter",
          "shape": [
            514
          ],
          "dtype": "float32"
        },
        {
          "name": "ConstantFolding/decode/decoder/dense/kernel_enter",
          "shape": [
            514,
            1
          ],
          "dtype": "float32"
        },
        {
          "name": "ConstantFolding/decode/decoder/dense/bias_enter",
          "shape": [
            1
          ],
          "dtype": "float32"
        },
        {
          "name": "ConstantFolding/decode_1/decoder/Tile/multiples_const_axis",
          "shape": [],
          "dtype": "int32"
        },
        {
          "name": "decode_1/decoder/while/Const",
          "shape": [
            1
          ],
          "dtype": "int32"
        },
        {
          "name": "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/sub/x",
          "shape": [],
          "dtype": "float32"
        },
        {
          "name": "rnn/while/rnn/multi_rnn_cell/cell_1/gru_cell/split/split_dim",
          "shape": [],
          "dtype": "int32"
        },
        {
          "name": "decode/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_1/gru_cell/sub_1/x",
          "shape": [],
          "dtype": "float32"
        },
        {
          "name": "decode_1/decoder/while/LogicalOr/x",
          "shape": [],
          "dtype": "bool"
        },
        {
          "name": "decode_1/decoder/while/add_2/y",
          "shape": [],
          "dtype": "int32"
        }
      ]
    }
  ]
}